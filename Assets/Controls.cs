//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Humanoid"",
            ""id"": ""4a068a0e-dac2-423e-88f0-ef91e39839fb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""57c5ee55-c275-46d8-a911-4951b2791260"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e2ffde98-6ac4-456a-a1e3-6dc53e0fc06b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""06051a49-f92b-4626-ad03-bb484d675f93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grappling Hook Left"",
                    ""type"": ""Button"",
                    ""id"": ""c2886b3d-7ea0-4466-b284-5eb6e1861d6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grappling Hook Right"",
                    ""type"": ""Button"",
                    ""id"": ""190d35da-c2ce-48c2-9656-b664b09fa37b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grappling Hook Center"",
                    ""type"": ""Button"",
                    ""id"": ""b3642a94-64cb-4bc7-b00b-968af5f82305"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thruster Left"",
                    ""type"": ""Button"",
                    ""id"": ""6eda6dce-23e4-47f8-8633-bb634ba9b85a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thruster Right"",
                    ""type"": ""Button"",
                    ""id"": ""416e2ea9-5df0-49c0-be00-542dc7307d83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thruster Center"",
                    ""type"": ""Button"",
                    ""id"": ""6f75d801-8568-4f64-a70b-910fe645725d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""baa03bd0-b67b-481c-bbc2-c69d7cea6302"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Grappling Hook Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8cccae8-df21-49c2-b4e6-18ab5c104e92"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Grappling Hook Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9b4186c-9818-4cf7-a8ec-7c56655d54fa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Grappling Hook Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e05bcfe-1e0f-4b4d-b2bf-7b2240428ba4"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Grappling Hook Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""248fe44b-ae73-4a0c-8166-8f2e9e43c2a1"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Thruster Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd529c6d-8684-4b7d-98a3-89fd85075029"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Thruster Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f72e69a0-7027-4803-9f29-d0f5addc799b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Thruster Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca06f78-5c6f-4818-83c9-acbf88b7a098"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Thruster Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d17a1cd2-5142-4d48-ba91-135ccc0c5081"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed8153a9-fe13-47f3-9b6d-661d730ea7b6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1faeeeb2-fd70-46b7-a2c7-e3bf2b086dfe"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f82c8d1-a042-4795-8291-eecc698aaea3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""788d1cca-f89a-4c04-b575-3002696c319e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e85edac1-3f19-4cb6-8498-1c93a5e76d6a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f3fb0d8-f91c-4b0d-b016-a3fd0d150d53"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db154541-94ce-4075-82e8-91f65190696f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""073c9dbc-6e13-4652-9967-8574d4b67f33"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33997f16-674f-4990-8744-843f738f306e"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df4b553b-26c3-4113-9a9c-5aef7f2f7e72"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=2,y=2)"",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f14e365-29e1-4959-85d7-3a3e751b2089"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43d5fe2b-6a13-4495-a711-22884d54c91e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardOrGamepad"",
            ""bindingGroup"": ""KeyboardOrGamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GenericVR"",
            ""bindingGroup"": ""GenericVR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<TrackedDevice>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Humanoid
        m_Humanoid = asset.FindActionMap("Humanoid", throwIfNotFound: true);
        m_Humanoid_Move = m_Humanoid.FindAction("Move", throwIfNotFound: true);
        m_Humanoid_Turn = m_Humanoid.FindAction("Turn", throwIfNotFound: true);
        m_Humanoid_Jump = m_Humanoid.FindAction("Jump", throwIfNotFound: true);
        m_Humanoid_GrapplingHookLeft = m_Humanoid.FindAction("Grappling Hook Left", throwIfNotFound: true);
        m_Humanoid_GrapplingHookRight = m_Humanoid.FindAction("Grappling Hook Right", throwIfNotFound: true);
        m_Humanoid_GrapplingHookCenter = m_Humanoid.FindAction("Grappling Hook Center", throwIfNotFound: true);
        m_Humanoid_ThrusterLeft = m_Humanoid.FindAction("Thruster Left", throwIfNotFound: true);
        m_Humanoid_ThrusterRight = m_Humanoid.FindAction("Thruster Right", throwIfNotFound: true);
        m_Humanoid_ThrusterCenter = m_Humanoid.FindAction("Thruster Center", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Humanoid
    private readonly InputActionMap m_Humanoid;
    private IHumanoidActions m_HumanoidActionsCallbackInterface;
    private readonly InputAction m_Humanoid_Move;
    private readonly InputAction m_Humanoid_Turn;
    private readonly InputAction m_Humanoid_Jump;
    private readonly InputAction m_Humanoid_GrapplingHookLeft;
    private readonly InputAction m_Humanoid_GrapplingHookRight;
    private readonly InputAction m_Humanoid_GrapplingHookCenter;
    private readonly InputAction m_Humanoid_ThrusterLeft;
    private readonly InputAction m_Humanoid_ThrusterRight;
    private readonly InputAction m_Humanoid_ThrusterCenter;
    public struct HumanoidActions
    {
        private @Controls m_Wrapper;
        public HumanoidActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Humanoid_Move;
        public InputAction @Turn => m_Wrapper.m_Humanoid_Turn;
        public InputAction @Jump => m_Wrapper.m_Humanoid_Jump;
        public InputAction @GrapplingHookLeft => m_Wrapper.m_Humanoid_GrapplingHookLeft;
        public InputAction @GrapplingHookRight => m_Wrapper.m_Humanoid_GrapplingHookRight;
        public InputAction @GrapplingHookCenter => m_Wrapper.m_Humanoid_GrapplingHookCenter;
        public InputAction @ThrusterLeft => m_Wrapper.m_Humanoid_ThrusterLeft;
        public InputAction @ThrusterRight => m_Wrapper.m_Humanoid_ThrusterRight;
        public InputAction @ThrusterCenter => m_Wrapper.m_Humanoid_ThrusterCenter;
        public InputActionMap Get() { return m_Wrapper.m_Humanoid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanoidActions set) { return set.Get(); }
        public void SetCallbacks(IHumanoidActions instance)
        {
            if (m_Wrapper.m_HumanoidActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Turn.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnTurn;
                @Jump.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @GrapplingHookLeft.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookLeft;
                @GrapplingHookLeft.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookLeft;
                @GrapplingHookLeft.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookLeft;
                @GrapplingHookRight.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookRight;
                @GrapplingHookRight.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookRight;
                @GrapplingHookRight.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookRight;
                @GrapplingHookCenter.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookCenter;
                @GrapplingHookCenter.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookCenter;
                @GrapplingHookCenter.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnGrapplingHookCenter;
                @ThrusterLeft.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterLeft;
                @ThrusterLeft.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterLeft;
                @ThrusterLeft.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterLeft;
                @ThrusterRight.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterRight;
                @ThrusterRight.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterRight;
                @ThrusterRight.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterRight;
                @ThrusterCenter.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterCenter;
                @ThrusterCenter.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterCenter;
                @ThrusterCenter.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnThrusterCenter;
            }
            m_Wrapper.m_HumanoidActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @GrapplingHookLeft.started += instance.OnGrapplingHookLeft;
                @GrapplingHookLeft.performed += instance.OnGrapplingHookLeft;
                @GrapplingHookLeft.canceled += instance.OnGrapplingHookLeft;
                @GrapplingHookRight.started += instance.OnGrapplingHookRight;
                @GrapplingHookRight.performed += instance.OnGrapplingHookRight;
                @GrapplingHookRight.canceled += instance.OnGrapplingHookRight;
                @GrapplingHookCenter.started += instance.OnGrapplingHookCenter;
                @GrapplingHookCenter.performed += instance.OnGrapplingHookCenter;
                @GrapplingHookCenter.canceled += instance.OnGrapplingHookCenter;
                @ThrusterLeft.started += instance.OnThrusterLeft;
                @ThrusterLeft.performed += instance.OnThrusterLeft;
                @ThrusterLeft.canceled += instance.OnThrusterLeft;
                @ThrusterRight.started += instance.OnThrusterRight;
                @ThrusterRight.performed += instance.OnThrusterRight;
                @ThrusterRight.canceled += instance.OnThrusterRight;
                @ThrusterCenter.started += instance.OnThrusterCenter;
                @ThrusterCenter.performed += instance.OnThrusterCenter;
                @ThrusterCenter.canceled += instance.OnThrusterCenter;
            }
        }
    }
    public HumanoidActions @Humanoid => new HumanoidActions(this);
    private int m_KeyboardOrGamepadSchemeIndex = -1;
    public InputControlScheme KeyboardOrGamepadScheme
    {
        get
        {
            if (m_KeyboardOrGamepadSchemeIndex == -1) m_KeyboardOrGamepadSchemeIndex = asset.FindControlSchemeIndex("KeyboardOrGamepad");
            return asset.controlSchemes[m_KeyboardOrGamepadSchemeIndex];
        }
    }
    private int m_GenericVRSchemeIndex = -1;
    public InputControlScheme GenericVRScheme
    {
        get
        {
            if (m_GenericVRSchemeIndex == -1) m_GenericVRSchemeIndex = asset.FindControlSchemeIndex("GenericVR");
            return asset.controlSchemes[m_GenericVRSchemeIndex];
        }
    }
    public interface IHumanoidActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnGrapplingHookLeft(InputAction.CallbackContext context);
        void OnGrapplingHookRight(InputAction.CallbackContext context);
        void OnGrapplingHookCenter(InputAction.CallbackContext context);
        void OnThrusterLeft(InputAction.CallbackContext context);
        void OnThrusterRight(InputAction.CallbackContext context);
        void OnThrusterCenter(InputAction.CallbackContext context);
    }
}
