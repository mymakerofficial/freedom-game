//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Humanoid"",
            ""id"": ""4a068a0e-dac2-423e-88f0-ef91e39839fb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""57c5ee55-c275-46d8-a911-4951b2791260"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e2ffde98-6ac4-456a-a1e3-6dc53e0fc06b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""06051a49-f92b-4626-ad03-bb484d675f93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d17a1cd2-5142-4d48-ba91-135ccc0c5081"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed8153a9-fe13-47f3-9b6d-661d730ea7b6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1faeeeb2-fd70-46b7-a2c7-e3bf2b086dfe"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f82c8d1-a042-4795-8291-eecc698aaea3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""788d1cca-f89a-4c04-b575-3002696c319e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e85edac1-3f19-4cb6-8498-1c93a5e76d6a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f3fb0d8-f91c-4b0d-b016-a3fd0d150d53"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db154541-94ce-4075-82e8-91f65190696f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""073c9dbc-6e13-4652-9967-8574d4b67f33"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33997f16-674f-4990-8744-843f738f306e"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df4b553b-26c3-4113-9a9c-5aef7f2f7e72"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=2,y=2)"",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f14e365-29e1-4959-85d7-3a3e751b2089"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43d5fe2b-6a13-4495-a711-22884d54c91e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Thruster"",
            ""id"": ""2909e348-1719-4e36-98db-3c06f6657a87"",
            ""actions"": [
                {
                    ""name"": ""Force Left"",
                    ""type"": ""Value"",
                    ""id"": ""ad55a23f-460f-490f-8401-c2b4b5ae1023"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Force Right"",
                    ""type"": ""Value"",
                    ""id"": ""e3463003-37c3-4bdb-a134-2261f9ffe33b"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Force Center"",
                    ""type"": ""Value"",
                    ""id"": ""03576499-fbb1-44d7-a71e-215a62cf819c"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26c422ed-c57b-4101-9bff-10557f54375c"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Force Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30a0bc27-66e3-42b2-94b4-cdb52550a0ce"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Force Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""551238f6-d56f-4919-a162-9065520abc24"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Force Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""133f3d0e-e0ee-4e7d-88aa-7e609f7d2c8c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Force Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grappling Hook"",
            ""id"": ""586ea08f-193c-4274-9304-12632565cba5"",
            ""actions"": [
                {
                    ""name"": ""Trigger Left"",
                    ""type"": ""Button"",
                    ""id"": ""eac25d74-bd5d-4eb7-90cb-ae886420ee58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger Right"",
                    ""type"": ""Button"",
                    ""id"": ""8dc6db31-a939-4463-970c-a4243d0889a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger Center"",
                    ""type"": ""Button"",
                    ""id"": ""5139c05b-1028-4704-b2ad-257a427820f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6304ab1-a0a0-4b1f-91ee-2b3bc3a51b80"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Trigger Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c157e79-7f63-4f42-b473-4c8f185e6ef2"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Trigger Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1db32b75-e5f3-4aa2-a78f-2e1c85382149"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Trigger Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfdaa065-d348-4a3f-bb58-4dde48fa6523"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Trigger Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c366ea0-c8ad-4955-ba9e-d475c5c2aa03"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Trigger Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83c90a6-c254-45fd-989d-c748799c9285"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Trigger Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Spawner"",
            ""id"": ""5c50141f-81c9-4a83-bcbc-be4158380665"",
            ""actions"": [
                {
                    ""name"": ""Spawn"",
                    ""type"": ""Button"",
                    ""id"": ""8d16fbfc-e7db-4a4b-905a-a9eda6ce2aa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e4f9de1-4738-434b-9104-494ec974bf77"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""GenericVR"",
                    ""action"": ""Spawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""General"",
            ""id"": ""b13699ec-2f10-49bc-b88f-0f3574ab07a5"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""cd379ea3-eed7-4a9a-9d9a-f5b38e70edc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fab7cfea-2cfd-4e16-add2-2d55100d838b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardOrGamepad"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardOrGamepad"",
            ""bindingGroup"": ""KeyboardOrGamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GenericVR"",
            ""bindingGroup"": ""GenericVR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<TrackedDevice>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Humanoid
        m_Humanoid = asset.FindActionMap("Humanoid", throwIfNotFound: true);
        m_Humanoid_Move = m_Humanoid.FindAction("Move", throwIfNotFound: true);
        m_Humanoid_Turn = m_Humanoid.FindAction("Turn", throwIfNotFound: true);
        m_Humanoid_Jump = m_Humanoid.FindAction("Jump", throwIfNotFound: true);
        // Thruster
        m_Thruster = asset.FindActionMap("Thruster", throwIfNotFound: true);
        m_Thruster_ForceLeft = m_Thruster.FindAction("Force Left", throwIfNotFound: true);
        m_Thruster_ForceRight = m_Thruster.FindAction("Force Right", throwIfNotFound: true);
        m_Thruster_ForceCenter = m_Thruster.FindAction("Force Center", throwIfNotFound: true);
        // Grappling Hook
        m_GrapplingHook = asset.FindActionMap("Grappling Hook", throwIfNotFound: true);
        m_GrapplingHook_TriggerLeft = m_GrapplingHook.FindAction("Trigger Left", throwIfNotFound: true);
        m_GrapplingHook_TriggerRight = m_GrapplingHook.FindAction("Trigger Right", throwIfNotFound: true);
        m_GrapplingHook_TriggerCenter = m_GrapplingHook.FindAction("Trigger Center", throwIfNotFound: true);
        // Spawner
        m_Spawner = asset.FindActionMap("Spawner", throwIfNotFound: true);
        m_Spawner_Spawn = m_Spawner.FindAction("Spawn", throwIfNotFound: true);
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_Escape = m_General.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Humanoid
    private readonly InputActionMap m_Humanoid;
    private IHumanoidActions m_HumanoidActionsCallbackInterface;
    private readonly InputAction m_Humanoid_Move;
    private readonly InputAction m_Humanoid_Turn;
    private readonly InputAction m_Humanoid_Jump;
    public struct HumanoidActions
    {
        private @Controls m_Wrapper;
        public HumanoidActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Humanoid_Move;
        public InputAction @Turn => m_Wrapper.m_Humanoid_Turn;
        public InputAction @Jump => m_Wrapper.m_Humanoid_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Humanoid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanoidActions set) { return set.Get(); }
        public void SetCallbacks(IHumanoidActions instance)
        {
            if (m_Wrapper.m_HumanoidActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Turn.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnTurn;
                @Jump.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_HumanoidActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public HumanoidActions @Humanoid => new HumanoidActions(this);

    // Thruster
    private readonly InputActionMap m_Thruster;
    private IThrusterActions m_ThrusterActionsCallbackInterface;
    private readonly InputAction m_Thruster_ForceLeft;
    private readonly InputAction m_Thruster_ForceRight;
    private readonly InputAction m_Thruster_ForceCenter;
    public struct ThrusterActions
    {
        private @Controls m_Wrapper;
        public ThrusterActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForceLeft => m_Wrapper.m_Thruster_ForceLeft;
        public InputAction @ForceRight => m_Wrapper.m_Thruster_ForceRight;
        public InputAction @ForceCenter => m_Wrapper.m_Thruster_ForceCenter;
        public InputActionMap Get() { return m_Wrapper.m_Thruster; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThrusterActions set) { return set.Get(); }
        public void SetCallbacks(IThrusterActions instance)
        {
            if (m_Wrapper.m_ThrusterActionsCallbackInterface != null)
            {
                @ForceLeft.started -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceLeft;
                @ForceLeft.performed -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceLeft;
                @ForceLeft.canceled -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceLeft;
                @ForceRight.started -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceRight;
                @ForceRight.performed -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceRight;
                @ForceRight.canceled -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceRight;
                @ForceCenter.started -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceCenter;
                @ForceCenter.performed -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceCenter;
                @ForceCenter.canceled -= m_Wrapper.m_ThrusterActionsCallbackInterface.OnForceCenter;
            }
            m_Wrapper.m_ThrusterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ForceLeft.started += instance.OnForceLeft;
                @ForceLeft.performed += instance.OnForceLeft;
                @ForceLeft.canceled += instance.OnForceLeft;
                @ForceRight.started += instance.OnForceRight;
                @ForceRight.performed += instance.OnForceRight;
                @ForceRight.canceled += instance.OnForceRight;
                @ForceCenter.started += instance.OnForceCenter;
                @ForceCenter.performed += instance.OnForceCenter;
                @ForceCenter.canceled += instance.OnForceCenter;
            }
        }
    }
    public ThrusterActions @Thruster => new ThrusterActions(this);

    // Grappling Hook
    private readonly InputActionMap m_GrapplingHook;
    private IGrapplingHookActions m_GrapplingHookActionsCallbackInterface;
    private readonly InputAction m_GrapplingHook_TriggerLeft;
    private readonly InputAction m_GrapplingHook_TriggerRight;
    private readonly InputAction m_GrapplingHook_TriggerCenter;
    public struct GrapplingHookActions
    {
        private @Controls m_Wrapper;
        public GrapplingHookActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerLeft => m_Wrapper.m_GrapplingHook_TriggerLeft;
        public InputAction @TriggerRight => m_Wrapper.m_GrapplingHook_TriggerRight;
        public InputAction @TriggerCenter => m_Wrapper.m_GrapplingHook_TriggerCenter;
        public InputActionMap Get() { return m_Wrapper.m_GrapplingHook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrapplingHookActions set) { return set.Get(); }
        public void SetCallbacks(IGrapplingHookActions instance)
        {
            if (m_Wrapper.m_GrapplingHookActionsCallbackInterface != null)
            {
                @TriggerLeft.started -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerLeft;
                @TriggerLeft.performed -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerLeft;
                @TriggerLeft.canceled -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerLeft;
                @TriggerRight.started -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerRight;
                @TriggerRight.performed -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerRight;
                @TriggerRight.canceled -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerRight;
                @TriggerCenter.started -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerCenter;
                @TriggerCenter.performed -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerCenter;
                @TriggerCenter.canceled -= m_Wrapper.m_GrapplingHookActionsCallbackInterface.OnTriggerCenter;
            }
            m_Wrapper.m_GrapplingHookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TriggerLeft.started += instance.OnTriggerLeft;
                @TriggerLeft.performed += instance.OnTriggerLeft;
                @TriggerLeft.canceled += instance.OnTriggerLeft;
                @TriggerRight.started += instance.OnTriggerRight;
                @TriggerRight.performed += instance.OnTriggerRight;
                @TriggerRight.canceled += instance.OnTriggerRight;
                @TriggerCenter.started += instance.OnTriggerCenter;
                @TriggerCenter.performed += instance.OnTriggerCenter;
                @TriggerCenter.canceled += instance.OnTriggerCenter;
            }
        }
    }
    public GrapplingHookActions @GrapplingHook => new GrapplingHookActions(this);

    // Spawner
    private readonly InputActionMap m_Spawner;
    private ISpawnerActions m_SpawnerActionsCallbackInterface;
    private readonly InputAction m_Spawner_Spawn;
    public struct SpawnerActions
    {
        private @Controls m_Wrapper;
        public SpawnerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spawn => m_Wrapper.m_Spawner_Spawn;
        public InputActionMap Get() { return m_Wrapper.m_Spawner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpawnerActions set) { return set.Get(); }
        public void SetCallbacks(ISpawnerActions instance)
        {
            if (m_Wrapper.m_SpawnerActionsCallbackInterface != null)
            {
                @Spawn.started -= m_Wrapper.m_SpawnerActionsCallbackInterface.OnSpawn;
                @Spawn.performed -= m_Wrapper.m_SpawnerActionsCallbackInterface.OnSpawn;
                @Spawn.canceled -= m_Wrapper.m_SpawnerActionsCallbackInterface.OnSpawn;
            }
            m_Wrapper.m_SpawnerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Spawn.started += instance.OnSpawn;
                @Spawn.performed += instance.OnSpawn;
                @Spawn.canceled += instance.OnSpawn;
            }
        }
    }
    public SpawnerActions @Spawner => new SpawnerActions(this);

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_Escape;
    public struct GeneralActions
    {
        private @Controls m_Wrapper;
        public GeneralActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_General_Escape;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);
    private int m_KeyboardOrGamepadSchemeIndex = -1;
    public InputControlScheme KeyboardOrGamepadScheme
    {
        get
        {
            if (m_KeyboardOrGamepadSchemeIndex == -1) m_KeyboardOrGamepadSchemeIndex = asset.FindControlSchemeIndex("KeyboardOrGamepad");
            return asset.controlSchemes[m_KeyboardOrGamepadSchemeIndex];
        }
    }
    private int m_GenericVRSchemeIndex = -1;
    public InputControlScheme GenericVRScheme
    {
        get
        {
            if (m_GenericVRSchemeIndex == -1) m_GenericVRSchemeIndex = asset.FindControlSchemeIndex("GenericVR");
            return asset.controlSchemes[m_GenericVRSchemeIndex];
        }
    }
    public interface IHumanoidActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IThrusterActions
    {
        void OnForceLeft(InputAction.CallbackContext context);
        void OnForceRight(InputAction.CallbackContext context);
        void OnForceCenter(InputAction.CallbackContext context);
    }
    public interface IGrapplingHookActions
    {
        void OnTriggerLeft(InputAction.CallbackContext context);
        void OnTriggerRight(InputAction.CallbackContext context);
        void OnTriggerCenter(InputAction.CallbackContext context);
    }
    public interface ISpawnerActions
    {
        void OnSpawn(InputAction.CallbackContext context);
    }
    public interface IGeneralActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
}
